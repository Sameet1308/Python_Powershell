import boto3
import json

def lambda_handler(event, context):
    source_database_name = 'source_database'  # Replace with your source Glue database name
    target_database_name = 'target_database'  # Replace with your target Glue database name

    # Initialize the Glue client
    glue_client = boto3.client('glue')

    try:
        # Get the list of tables in the source database
        response = glue_client.get_tables(DatabaseName=source_database_name)
        tables = response['TableList']

        for table in tables:
            table_definition = table.copy()

            # Remove invalid parameters for TableInput
            invalid_keys = [
                'DatabaseName', 'CatalogId', 'CreateTime', 'UpdateTime',
                'CreatedBy', 'IsRegisteredWithLakeFormation', 'VersionId',
                'LastAccessTime', 'LastAnalyzedTime', 'CatalogVersion'
            ]

            for key in invalid_keys:
                table_definition.pop(key, None)

            # Set the target database name
            table_definition['DatabaseName'] = target_database_name

            # Debugging: Print table definition
            print(f"Table definition for {table['Name']}: {json.dumps(table_definition, indent=2)}")

            # Create the table in the target Glue catalog
            try:
                glue_client.create_table(
                    DatabaseName=target_database_name,
                    TableInput=table_definition
                )
                print(f"Table {table['Name']} copied successfully.")
            except Exception as e:
                print(f"Error copying table {table['Name']}: {str(e)}")

        return {
            'statusCode': 200,
            'body': json.dumps(f'All tables from {source_database_name} copied to {target_database_name}')
        }

    except Exception as e:
        error_message = f"An error occurred: {str(e)}"
        print(error_message)
        return {
            'statusCode': 500,
            'body': json.dumps(error_message)
        }
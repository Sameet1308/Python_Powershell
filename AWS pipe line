import boto3
import json
from datetime import datetime

def lambda_handler(event, context):
    source_database_name = 'source_database'  # Replace with your source Glue database name
    target_database_name = 'target_database'  # Replace with your target Glue database name
    target_role_arn = 'arn:aws:iam::TARGET_ACCOUNT_ID:role/TARGET_ROLE_NAME'  # Replace with your target role ARN

    # Initialize the Glue client in the source account
    glue_client = boto3.client('glue')

    def convert_datetime(obj):
        if isinstance(obj, datetime):
            return obj.isoformat()
        raise TypeError("Type not serializable")

    try:
        # Get the list of tables in the source database
        response = glue_client.get_tables(DatabaseName=source_database_name)
        tables = response['TableList']

        # Assume the role in the target account
        sts_client = boto3.client('sts')
        assumed_role = sts_client.assume_role(
            RoleArn=target_role_arn,
            RoleSessionName='GlueTableCopySession'
        )
        credentials = assumed_role['Credentials']

        # Initialize the Glue client in the target account using assumed role credentials
        target_glue_client = boto3.client(
            'glue',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken']
        )

        for table in tables:
            table_input = {
                'Name': table['Name'],
                'Description': table.get('Description'),
                'Owner': table.get('Owner'),
                'LastAccessTime': table.get('LastAccessTime'),
                'LastAnalyzedTime': table.get('LastAnalyzedTime'),
                'Retention': table.get('Retention'),
                'StorageDescriptor': table['StorageDescriptor'],
                'PartitionKeys': table.get('PartitionKeys'),
                'ViewOriginalText': table.get('ViewOriginalText'),
                'ViewExpandedText': table.get('ViewExpandedText'),
                'TableType': table.get('TableType'),
                'Parameters': table.get('Parameters'),
                'TargetTable': table.get('TargetTable')
            }

            # Remove any keys that are None
            table_input = {k: v for k, v in table_input.items() if v is not None}

            # Debugging: Print table definition
            print(f"Table definition for {table['Name']}: {json.dumps(table_input, indent=2, default=convert_datetime)}")

            # Create the table in the target Glue catalog
            try:
                target_glue_client.create_table(
                    DatabaseName=target_database_name,
                    TableInput=table_input
                )
                print(f"Table {table['Name']} copied successfully.")
            except Exception as e:
                print(f"Error copying table {table['Name']}: {str(e)}")

        return {
            'statusCode': 200,
            'body': json.dumps(f'All tables from {source_database_name} copied to {target_database_name}')
        }

    except Exception as e:
        error_message = f"An error occurred: {str(e)}"
        print(error_message)
        return {
            'statusCode': 500,
            'body': json.dumps(error_message)
        }
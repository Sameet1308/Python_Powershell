from mstrio.project_objects import list_all_cubes, OlapCube
from mstrio import connection
import re
import getpass
import pandas as pd

# Function to extract tables and columns
def extract_tables_columns(sql_query):
    try:
        table_pattern = r'FROM\s+([`"]?.+?[`"]?)\s|JOIN\s+([`"]?.+?[`"]?)\s'
        column_pattern = r'SELECT\s+(.*?)\s+FROM'
        
        tables = set(re.findall(table_pattern, sql_query, re.IGNORECASE))
        tables = [table for tpl in tables for table in tpl if table]
        
        columns_match = re.search(column_pattern, sql_query, re.IGNORECASE)
        columns = columns_match.group(1).split(',') if columns_match else []
        columns = [col.strip() for col in columns]

        return tables, columns
    except Exception as e:
        print(f"Error in extract_tables_columns: {e}")
        return [], []

# Connection setup
SERVER_URL = "https://env-XXXXXX.customer.cloud.microstrategy.com/MicroStrategyLibrary"
USERNAME = "mstr"
PASSWORD = getpass.getpass(prompt='Password: ')
PROJECT_NAME = "MicroStrategy Tutorial"

try:
    conn = connection.Connection(SERVER_URL, username=USERNAME, password=PASSWORD, project_name=PROJECT_NAME)
    conn.connect()
except Exception as e:
    print(f"Error connecting to MicroStrategy: {e}")
    exit()

# Retrieve and process cubes
try:
    list_of_all_cubes_as_dicts = list_all_cubes(connection=conn, to_dictionary=True)
    print("\nFound " + str(len(list_of_all_cubes_as_dicts)) + " cubes\n")
except Exception as e:
    print(f"Error retrieving cubes: {e}")
    exit()

cubes_subtypes = [776, 779]
list_of_all_cubes_as_dicts = [cu for cu in list_of_all_cubes_as_dicts if cu['subtype'] in cubes_subtypes]
print(f"Number of cubes: {len(list_of_all_cubes_as_dicts)}")

# Process each cube
cube_data = []
for cube in list_of_all_cubes_as_dicts:
    cube_id, cube_name, cube_subtype = cube["id"], cube["name"], cube["subtype"]
    try:
        current_cube = OlapCube(conn, cube_id)
        sql_view = current_cube.export_sql_view()
        sql_view_cleaned = " ".join(sql_view.split())

        tables, columns = extract_tables_columns(sql_view_cleaned)
        for table in tables:
            if not table.startswith(("ZZ", "*")):
                for column in columns:
                    if not column.startswith(("ZZ", "*")):
                        cube_data.append([
                            PROJECT_NAME, cube_id, cube_name, cube_subtype, table, column
                        ])
    except Exception as e:
        print(f"Failed to get the SQL for cube {cube_name} {cube_id}: {e}")

# Convert to DataFrame and export to Excel
headers = ["Project Name", "Cube ID", "Cube Name", "Cube Subtype", "Table Name", "Column Name"]
combined_df = pd.DataFrame(cube_data, columns=headers)
try:
    combined_df.to_excel("cube_data.xlsx", index=False)
    print("Export complete. Data saved to 'cube_data.xlsx'")
except Exception as e:
    print(f"Error exporting data to Excel: {e}")

import re

def read_log_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return file.readlines()
    except Exception as e:
        print(f"Error reading file: {e}")
        return []

def clean_log_lines(lines):
    cleaned_lines = []
    # Regex to match timestamps, potential line numbers or other prefixes before actual SQL code starts
    pattern = re.compile(r'^[\d-]+\s[\d:]+\s\d+\s\S+\s+(SELECT)', re.IGNORECASE)
    for line in lines:
        # Replace the matched pattern with "SELECT" to ensure we start clean with the SQL statement
        cleaned_line = pattern.sub(r'\1', line)
        cleaned_lines.append(cleaned_line)
    return cleaned_lines

def extract_sql_statements(lines):
    sql_statements = []
    current_sql = ""
    for line in lines:
        # Check if the line starts with SELECT to initiate or continue capturing an SQL statement
        if re.match(r'SELECT', line, re.IGNORECASE):
            if current_sql:  # If there's an ongoing SQL capture, store it before starting a new one
                sql_statements.append(current_sql.strip())
                current_sql = ""
            current_sql = line.strip()
        elif current_sql:
            # Continue appending lines to the current SQL statement
            current_sql += " " + line.strip()
            # If the line contains FROM followed by a word, capture up to that word and conclude this SQL statement
            if 'FROM' in line:
                from_match = re.search(r'FROM\s+(\w+)', line, re.IGNORECASE)
                if from_match:
                    current_sql += " " + from_match.group(1)  # Add the table name to the SQL statement
                    sql_statements.append(current_sql.strip())
                    current_sql = ""  # Reset for the next SQL statement

    # Ensure the last SQL statement is added if not already done
    if current_sql:
        sql_statements.append(current_sql.strip())

    return sql_statements

def main():
    log_file_path = 'path/to/your/log_file.log'  # Ensure this is correctly set to your log file path
    lines = read_log_file(log_file_path)
    cleaned_lines = clean_log_lines(lines)
    sql_statements = extract_sql_statements(cleaned_lines)
    for statement in sql_statements:
        print(statement)
        print('-' * 40)  # Separator between SQL statements for clarity

if __name__ == "__main__":
    main()

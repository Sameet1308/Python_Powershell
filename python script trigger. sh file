import paramiko
import json
import socket
import time

def load_credentials(json_path):
    try:
        with open(json_path, 'r') as file:
            return json.load(file)
    except Exception as e:
        print(f"Error loading credentials: {e}")
        return None

def is_server_up(hostname, port=22):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(10)
    try:
        sock.connect((hostname, port))
        return True
    except socket.error:
        return False
    finally:
        sock.close()

def execute_ssh_commands(hostname, port, username, password, commands):
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname, port=port, username=username, password=password)

        for command in commands:
            stdin, stdout, stderr = client.exec_command(command)
            print(stdout.read().decode())
            err = stderr.read().decode()
            if err:
                print(f"Error executing command '{command}': {err}")

        client.close()
    except Exception as e:
        print(f"SSH connection error: {e}")

def main():
    credentials_path = '/path/to/credentials.json'
    credentials = load_credentials(credentials_path)
    if credentials is None:
        return

    hostname = credentials['hostname']
    username = credentials['username']
    password = credentials['password']
    commands = ['cd /your/directory', 'ls', 'sh ABC.sh']

    while True:
        if is_server_up(hostname):
            execute_ssh_commands(hostname, 22, username, password, commands)
            break
        else:
            print("Server is down. Checking again in 60 seconds.")
            time.sleep(60)

if __name__ == "__main__":
    main()

import pandas as pd
import random
from itertools import combinations

# Load the CSV data
file_path = 'your_file_path.csv'  # Replace with your actual file path
df = pd.read_csv(file_path)

# Group applications by user
user_apps = df.groupby('user')['app_name'].apply(set).to_dict()

# List all users
users = list(user_apps.keys())

# Function to find the optimal combination of users with the least number of distinct applications
def find_optimal_combination(user_apps, target_user_count, sample_size=1000):
    best_combination = None
    minimal_apps_count = float('inf')
    
    for _ in range(sample_size):
        # Randomly sample a combination of target_user_count users
        sampled_users = random.sample(users, target_user_count)
        
        # Calculate the combined set of applications for this sample
        combined_apps = set()
        for user in sampled_users:
            combined_apps.update(user_apps[user])
        
        # Count the number of distinct applications
        num_distinct_apps = len(combined_apps)
        
        # Track the best combination
        if num_distinct_apps < minimal_apps_count:
            minimal_apps_count = num_distinct_apps
            best_combination = (sampled_users, combined_apps)
    
    return best_combination

# Parameters
target_user_count = 3  # Set the target number of users for the combination
sample_size = 10000  # Number of random samples to evaluate

# Find the optimal combination
optimal_combination = find_optimal_combination(user_apps, target_user_count, sample_size)

# Print the optimal combination and their distinct application counts
sampled_users, apps = optimal_combination
print(f"Optimal combination {sampled_users} accesses {len(apps)} distinct applications: {apps}")
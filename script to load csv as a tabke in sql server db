import csv
import pyodbc
import time
import warnings

# Disable all warnings
warnings.filterwarnings("ignore")

# Connection parameters
server = 'b18382.hxhx.adid.net'
port = '2828'
database = 'YOUR_DATABASE'
table_name = 'dbo.YOUR_TABLE_NAME'  # Adding dbo prefix
csv_file_path = r'\\ghh\path\to\your\large_csv_file.csv'  # Adjust this to your network share path
batch_size = 1000  # Number of rows to insert in each batch
print_interval = 5000  # Interval for print statements

# Create a connection to the SQL Server database using Windows Authentication
connection_string = f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server},{port};DATABASE={database};Trusted_Connection=yes;"
conn = pyodbc.connect(connection_string)
cursor = conn.cursor()

# Function to create table if it doesn't exist
def create_table_if_not_exists(cursor, table_name, column_names):
    columns = ', '.join([f'[{name}] NVARCHAR(MAX)' for name in column_names])
    create_table_sql = f"IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{table_name.split('.')[-1]}') CREATE TABLE {table_name} ({columns})"
    cursor.execute(create_table_sql)
    cursor.commit()

# Function to insert batch of rows into SQL Server
def insert_batch(cursor, table_name, column_names, rows):
    placeholders = ', '.join(['?' for _ in column_names])
    columns = ', '.join([f'[{name}]' for name in column_names])
    insert_sql = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
    cursor.executemany(insert_sql, rows)
    cursor.commit()

# Read CSV and process in batches
start_time = time.time()  # Start the timer
with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
    reader = csv.reader(csvfile)
    column_names = next(reader)  # Read the header
    create_table_if_not_exists(cursor, table_name, column_names)

    batch = []
    total_rows = 0
    batch_count = 0

    for row in reader:
        batch.append(row)
        total_rows += 1
        if len(batch) == batch_size:
            insert_batch(cursor, table_name, column_names, batch)
            batch_count += 1
            if total_rows % print_interval == 0:
                print(f"Inserted {total_rows} rows so far")
            batch = []

    # Insert any remaining rows
    if batch:
        insert_batch(cursor, table_name, column_names, batch)
        total_rows += len(batch)
        print(f"Inserted final batch of {len(batch)} rows, total {total_rows} rows inserted")

end_time = time.time()  # End the timer
total_duration = end_time - start_time
print(f"Total time taken: {total_duration:.2f} seconds")

# Close the connection
cursor.close()
conn.close()

print("CSV file has been successfully loaded into the SQL Server table.")
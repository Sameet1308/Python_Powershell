import sqlparse
from mstrio.project_objects import list_all_cubes, OlapCube
from mstrio import connection
import getpass
import pandas as pd
import warnings
import urllib3

# Function to parse SQL and extract table and column information
def parse_sql(sql_query):
    try:
        # Parsing logic; ensure this returns lists, even if empty
        table_pattern = r'FROM\s+([`"]?.+?[`"]?)\s|JOIN\s+([`"]?.+?[`"]?)\s'
        column_pattern = r'SELECT\s+(.*?)\s+FROM'
        
        tables = set(re.findall(table_pattern, sql_query, re.IGNORECASE))
        tables = [table for tpl in tables for table in tpl if table]
        
        columns_match = re.search(column_pattern, sql_query, re.IGNORECASE)
        columns = columns_match.group(1).split(',') if columns_match else []
        columns = [col.strip() for col in columns]

        return tables, columns
    except Exception as e:
        print(f"Error parsing SQL: {e}")
        return [], []

# Suppress SSL warnings
warnings.simplefilter('ignore', category=urllib3.exceptions.InsecureRequestWarning)

# Connection setup
SERVER_URL = "https://env-XXXXXX.customer.cloud.microstrategy.com/MicroStrategyLibrary"
USERNAME = "mstr"
PASSWORD = getpass.getpass(prompt='Password: ')
PROJECT_NAME = "MicroStrategy Tutorial"

# Connect to MicroStrategy
conn = connection.Connection(SERVER_URL, username=USERNAME, password=PASSWORD, project_name=PROJECT_NAME, ssl_verify=False)
conn.connect()

# Retrieve and process cubes
list_of_all_cubes_as_dicts = list_all_cubes(connection=conn, to_dictionary=True)

# Process each cube
cube_data = []
for cube in list_of_all_cubes_as_dicts:
    cube_id, cube_name = cube["id"], cube["name"]
    
    try:
        current_cube = OlapCube(conn, cube_id)
        sql_view = current_cube.export_sql_view()
        if sql_view:
            tables, columns = parse_sql(sql_view)
            for table in tables:
                for column in columns:
                    cube_data.append([PROJECT_NAME, cube_id, cube_name, table, column])
        else:
            print(f"No SQL view found for cube {cube_name} (ID: {cube_id})")
    except Exception as e:
        print(f"Error processing cube {cube_name} (ID: {cube_id}): {e}")

# Convert to DataFrame and export to Excel
headers = ["Project Name", "Cube ID", "Cube Name", "Table Name", "Column Name"]
combined_df = pd.DataFrame(cube_data, columns=headers)
combined_df.to_excel("cube_data.xlsx", index=False)

print("Data export complete. Check 'cube_data.xlsx'")